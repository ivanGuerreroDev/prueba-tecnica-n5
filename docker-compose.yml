version: '3.8'
services:
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=YourPassword123!
    ports:
      - "1433:1433"
    volumes:
      - sqlserverdata:/var/opt/mssql
    networks:
      - app-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.0
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - app-network

  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    ports:
      - "2181:2181"
    networks:
      - app-network

  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=INSIDE://kafka:9093,OUTSIDE://localhost:9092
      - KAFKA_LISTENERS=INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      - KAFKA_LOG_DIRS=/var/lib/kafka/data
      - KAFKA_INTER_BROKER_LISTENER_NAME=INSIDE
    depends_on:
      - zookeeper
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - app-network

  init-kafka:
    image: wurstmeister/kafka:latest
    depends_on:
      - kafka
    entrypoint:
      - /bin/bash
      - -c
      - |
        echo "Waiting for Kafka to be ready..."
        cub kafka-ready -b kafka:9093 1 20
        echo "Creating topics..."
        kafka-topics.sh --create --topic permissions --bootstrap-server kafka:9093 --partitions 1 --replication-factor 1
        echo "Topics created."
    tty: true
    networks:
      - app-network

  webapi:
    build:
      context: ./WebApi
      dockerfile: Dockerfile
    ports:
      - "5000:80"
    depends_on:
      - sqlserver
      - elasticsearch
      - kafka
    networks:
      - app-network
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=PermissionsDB;User Id=sa;Password=YourPassword123!;

  frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - webapi
    networks:
      - app-network

volumes:
  sqlserverdata:
  kafka-data:
networks:
  app-network:
    driver: bridge
